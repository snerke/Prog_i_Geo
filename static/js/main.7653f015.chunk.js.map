{"version":3,"sources":["components/SidePanel/SidePanel.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["SidePanel","props","mapLayerArray","i","mapLayers","length","push","reverse","id","className","map","item","draggable","substring","src","type","style","display","placeholder","min","max","Map","useState","setMap","setMapLayers","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","container","current","center","zoom","addLayers","getStyle","sources","addNewLayer","gloshaugen","test_points","trondheim_vann","trondheim_veg","trondheim_bygg","mapSourceLength","Object","keys","mapLayersInOrder","layers","slice","obj","updateButtons","layerName","data","setTimeout","layerType","prompt","geometry","features","console","log","addSource","addLayer","randomizeColor","err","alert","removeAllLayers","layerSources","layerSource","removeLayer","removeSource","removeSingleLayer","selectedLayer","this","createBuffer","toggleSpinner","document","getElementById","value","bufferSize","getSource","_data","turfed","turf","units","createUnion","selectedLayer1","selectedLayer2","replace","currUnion","createIntersect","layerType1","layerType2","unioned","currDiff","intersected","createDifference","createPoint","longCoord","parseFloat","latCoord","isNaN","showOrHide","visibility","getLayoutProperty","undefined","setLayoutProperty","textContent","randomColor","Math","floor","random","addControl","NavigationControl","on","resize","e","coords","lngLat","lng","lat","addEventListener","event","target","setPaintProperty","dragging","getLI","nodeName","toLowerCase","parentNode","spinner","buttons","getElementsByTagName","onclick","dataTransfer","setData","preventDefault","bounding","getBoundingClientRect","offset","y","height","clientY","insertBefore","nextSibling","previousSibling","moveLayer","initializeMap","ref","el","styles","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7653f015.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./SidePanel.css\";\r\n//import SidePanel from \"../SidePanel/SidePanel\";\r\n//import testdata from \"../../sample_data/befolkning_5km.json\";\r\n\r\n\r\nconst SidePanel = (props) => {\r\n\r\n  //const [testMapLayers, setTestMapLayers] = useState([]);\r\n  let mapLayerArray = [];\r\n  for (let i = 0; i < props.mapLayers.length; i++) {\r\n    if(props.mapLayers[i] !== \"composite\" && props.mapLayers[i] !== \"mapbox\") {\r\n      mapLayerArray.push(props.mapLayers[i]);\r\n    }\r\n  }\r\n  //reverses the order so that the top-most layer appears at the start of the array\r\n  mapLayerArray.reverse();\r\n\r\n  \r\n  \r\n  return (\r\n      <div id=\"sidepanel\">\r\n        <div>\r\n          <div className=\"logo\">\r\n            bGIS\r\n          </div>\r\n           \r\n          <div id=\"functionality\" className=\"functionalitylist\">\r\n          <div>\r\n              <ul id=\"layerList\" className=\"layerlist\">\r\n                {mapLayerArray.map((item) => (\r\n                  <li draggable=\"true\" id={item} className=\"dragdrop\">\r\n                    {item.substring(0, 20) + ((item.length > 20) ? \"...\": \"\")}\r\n                    <div className=\"colorpickerwrapper\" src=\"https://www.flaticon.com/svg/static/icons/svg/565/565789.svg\">\r\n                      <input type=\"color\" id={item} className=\"colorpicker\"></input>\r\n                    </div>\r\n                    <div className=\"layerbuttons\">\r\n                      <button id={item} className=\"layerbutton\">\r\n                        Hide\r\n                      </button>\r\n                      <button id={item} className=\"layerbutton\">\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <button id=\"addBaseLayersButton\">Add base layers</button>\r\n            <button id=\"removeAllLayersButton\">Remove all layers</button>\r\n            <div id=\"loadingspinner\" className=\"spinner\" style={{display: \"block\"}}></div>\r\n            <div className=\"buffer\">\r\n              <div>Buffer</div>\r\n              <select id=\"bufferSelectLayer\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <input id=\"bufferInputField\" type=\"number\" placeholder=\"Buffer size (m)\" min=\"0\"></input>\r\n              <button id=\"bufferButton\">Buffer</button>\r\n            </div>\r\n            <div className=\"union\">\r\n              <div>Union</div>\r\n              <select id=\"unionSelectLayer1\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <select id=\"unionSelectLayer2\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <button id=\"unionButton\">Union</button>\r\n            </div>\r\n            <div className=\"intersect\">\r\n              <div>Intersect</div>\r\n              <select id=\"intersectSelectLayer1\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <select id=\"intersectSelectLayer2\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <button id=\"intersectButton\">Intersect</button>\r\n            </div>\r\n            <div className=\"difference\">\r\n              <div>Difference</div>\r\n              <select id=\"differenceSelectLayer1\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <select id=\"differenceSelectLayer2\">\r\n                <option>Choose layer</option>\r\n                {mapLayerArray.map((item) => (\r\n                <option id={item}>{item}</option>\r\n                ))}\r\n              </select>\r\n              <button id=\"differenceButton\">Difference</button>\r\n            </div>\r\n            <div className=\"newpoint\">\r\n              <div>Create point</div>\r\n              <input id=\"createPointLong\" type=\"number\" placeholder=\"Longitude\" min=\"-180\" max=\"180\"></input>\r\n              <input id=\"createPointLat\" type=\"number\" placeholder=\"Latitude\" min=\"-85\" max=\"85\"></input>\r\n              <button id=\"createPointButton\">\r\n                Create Point\r\n              </button>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default SidePanel;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport SidePanel from \"../SidePanel/SidePanel\";\r\nimport \"./Map.css\";\r\nimport gloshaugen from \"../../sample_data/gloshaugen.json\";\r\nimport test_points from \"../../sample_data/test_points.json\";\r\nimport trondheim_vann from \"../../sample_data/trondheim_vann.json\";\r\nimport trondheim_bygg from \"../../sample_data/trondheim_bygg7.json\";\r\nimport trondheim_veg from \"../../sample_data/trondheim_veg5.json\";\r\nimport * as turf from '@turf/turf';\r\n\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [mapLayers, setMapLayers] = useState([]);\r\n  const mapContainer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [10.390645237668053, 63.420549355954904],\r\n        zoom: 13,\r\n      });\r\n\r\n      map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        setMapLayers([]);\r\n        map.resize();\r\n        updateButtons();\r\n        toggleSpinner();\r\n      });\r\n\r\n      //when the map is clicked a point will be made with those coordinates (can be cancelled)\r\n      map.on(\"click\", function(e) {\r\n        let coords = e.lngLat;\r\n          let data = {\"type\": \"FeatureCollection\", \r\n          \"features\": [\r\n            {\r\n              \"type\": \"Feature\",\r\n              \"geometry\": {\r\n                \"type\": \"Point\",\r\n                \"coordinates\": [\r\n                  coords.lng,\r\n                  coords.lat\r\n                ]\r\n              }\r\n            }]\r\n          }\r\n          addNewLayer(null, data);\r\n          setTimeout(() => {\r\n            let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n            if(mapSourceLength === 0) {\r\n              setMapLayers([]);\r\n            } else {\r\n              let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n              setMapLayers(mapLayersInOrder);\r\n            }\r\n            updateButtons();\r\n          }, 500);\r\n      });\r\n\r\n      //add base layers to the map and sets mapLayers\r\n      function addLayers() {\r\n        let mapLayers = map.getStyle().sources;\r\n        if(!(\"gloshaugen\" in mapLayers)) {\r\n          addNewLayer(\"gloshaugen\", gloshaugen);\r\n        }\r\n        if(!(\"test_points\" in mapLayers)) {\r\n          addNewLayer(\"test_points\", test_points);\r\n        }\r\n        if(!(\"trondheim_vann\" in mapLayers)) {\r\n          addNewLayer(\"trondheim_vann\", trondheim_vann);\r\n        }\r\n        if(!(\"trondheim_veg\" in mapLayers)) {\r\n          addNewLayer(\"trondheim_veg\", trondheim_veg);\r\n        }\r\n        if(!(\"trondheim_bygg\" in mapLayers)) {\r\n          addNewLayer(\"trondheim_bygg\", trondheim_bygg);\r\n        }\r\n\r\n        let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n        let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n        setMapLayers(mapLayersInOrder);\r\n        updateButtons();\r\n      }\r\n\r\n      //pops a prompt for the user to pick a name for the new layer, if no name is chosen, no layer is added\r\n      function addNewLayer(layerName, data) {\r\n        try{\r\n          setTimeout(() => {\r\n            let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n            if(mapSourceLength === 0) {\r\n              //in case the last layer was removed from the map, mapLayers is set to an empty array\r\n              setMapLayers([]);\r\n            } else {\r\n              //updates mapLayers if there are still layers left\r\n              let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n              setMapLayers(mapLayersInOrder);\r\n            }\r\n            updateButtons();\r\n          }, 350);\r\n          let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n          if(mapSourceLength > 0) {\r\n            let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n            setMapLayers(mapLayersInOrder);\r\n          }\r\n          if(layerName === null) {\r\n            layerName = prompt(\"Enter a name for your layer\");\r\n          }\r\n          if (layerName === null || layerName === \"\") {\r\n            //nothing happens if the prompt is cancelled or if no name is typed into the prompt\r\n          } else {\r\n            let layerType;\r\n            if(data.type === \"Feature\") {\r\n              layerType = data.geometry.type;\r\n              \r\n            } else if(data.type === \"FeatureCollection\") {\r\n              layerType = data.features[0].geometry.type;\r\n            } else {\r\n              console.log(\"we have something else\");\r\n            }\r\n            //checks what kind of layer the data is referring to and adds the corresponding type of layer\r\n            if(layerType === \"Polygon\" || layerType === \"MultiPolygon\") {\r\n              //checks if layerType is polygon or multipolygon and adds the data as a polygon layer\r\n              map.addSource(layerName, {\r\n                type: \"geojson\",\r\n                data: data,\r\n              })\r\n              map.addLayer({\r\n                \"id\": layerName,\r\n                \"type\": \"fill\",\r\n                \"source\": layerName,\r\n                \"paint\": {\r\n                  \"fill-color\": randomizeColor(),\r\n                  \"fill-opacity\": 1,\r\n                }\r\n              })\r\n            } else if (layerType === \"Line\" || layerType === \"MultiLineString\") {\r\n              //checks if layerType is line or multilinestring and adds the data as a line layer\r\n              map.addSource(layerName, {\r\n                type: \"geojson\",\r\n                data: data,\r\n              })\r\n              map.addLayer({\r\n                \"id\": layerName,\r\n                \"type\": \"line\",\r\n                \"source\": layerName,\r\n                \"layout\": {\r\n                  \"line-join\": \"round\",\r\n                  \"line-cap\": \"round\"\r\n                },\r\n                \"paint\": {\r\n                  \"line-color\": randomizeColor(),\r\n                  \"fill-opacity\": 1,\r\n                  \"line-width\": 4,\r\n                }\r\n              })\r\n            } else if(layerType === \"Point\" || layerType === \"MultiPoint\") {\r\n              //checks if layerType a point or multipoint and adds the data as a point layer\r\n              map.addSource(layerName, {\r\n                type: \"geojson\",\r\n                data: data,\r\n              })\r\n              map.addLayer({\r\n                \"id\": layerName,\r\n                \"type\": \"circle\",\r\n                \"source\": layerName,\r\n                \"paint\": {\r\n                  \"circle-radius\": {\r\n                    'base': 2,\r\n                    'stops': [[12, 2], [16, 5]]\r\n                  },\r\n                  \"circle-color\": randomizeColor(),\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n        catch(err) {\r\n          alert(\"Could not add layer\");\r\n        }\r\n      }\r\n\r\n      //removes all layers added to the map\r\n      function removeAllLayers() {\r\n        try{\r\n          let layerSources = map.getStyle().sources;\r\n          setTimeout(() => {let i = 0;\r\n            for (let layerSource in layerSources) {\r\n              if(i > 0) {\r\n                try{\r\n                  map.removeLayer(layerSource);\r\n                  map.removeSource(layerSource);\r\n                }\r\n                catch(err) {\r\n                  alert(err);\r\n                }\r\n              }\r\n              i++;\r\n            }}, 350);\r\n        }\r\n        catch(err) {\r\n          alert(err);\r\n        }\r\n        setTimeout(() => {\r\n          setMapLayers([]);\r\n          updateButtons();\r\n        }, 350);\r\n      }\r\n\r\n      //removes a single layer from the map\r\n      function removeSingleLayer() {\r\n        try{\r\n          let selectedLayer = this.id;\r\n          try {\r\n            map.removeLayer(selectedLayer);\r\n            map.removeSource(selectedLayer);\r\n          }\r\n          catch(err) {\r\n            alert(err);\r\n          }\r\n          //updates mapLayers\r\n          setTimeout(() => {\r\n            let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n            if(mapSourceLength === 0) {\r\n              //in case the last layer was removed from the map, mapLayers is set to an empty array\r\n              setMapLayers([]);\r\n            } else {\r\n              //updates mapLayers if there are still layers left\r\n              let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n              setMapLayers(mapLayersInOrder);\r\n            }\r\n            updateButtons();\r\n          }, 350);\r\n        }\r\n        catch(err) {\r\n          alert(err);\r\n        }\r\n      }\r\n\r\n      //creates a buffer around the selected layer\r\n      function createBuffer() {\r\n        toggleSpinner();\r\n        setTimeout(() => {\r\n          try{\r\n            let selectedLayer = document.getElementById(\"bufferSelectLayer\").value;\r\n            let bufferSize = document.getElementById(\"bufferInputField\").value/1000;\r\n            console.log(bufferSize);\r\n            if(bufferSize > 0) {\r\n              let features = map.getSource(selectedLayer)._data.features;\r\n              let turfed = turf.featureCollection(features);\r\n              let bufferData = turf.buffer(turfed, bufferSize, {units: \"kilometers\"});\r\n              addNewLayer(null, bufferData);\r\n              setTimeout(() => {\r\n                let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n                if(mapSourceLength === 0) {\r\n                  setMapLayers([]);\r\n                } else {\r\n                  let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n                  setMapLayers(mapLayersInOrder);\r\n                }\r\n                updateButtons();\r\n                toggleSpinner();\r\n              }, 350);\r\n            } else {\r\n              toggleSpinner();\r\n              alert(\"Please choose a buffer size greater than 0\");\r\n            }\r\n          }\r\n          catch(err) {\r\n            toggleSpinner();\r\n            alert(\"Please pick a layer and a buffer size\");\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      //creates a union between two layers of the same type\r\n      function createUnion() {\r\n        toggleSpinner();\r\n        setTimeout(() => {\r\n          try{\r\n            //finds which layers the user wants to create a union from\r\n            let selectedLayer1 = document.getElementById(\"unionSelectLayer1\").value;\r\n            let selectedLayer2 = document.getElementById(\"unionSelectLayer2\").value;\r\n            //finds the types of the layers to check that they are of the same type\r\n            let layerType1 = map.getSource(selectedLayer1)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            let layerType2 = map.getSource(selectedLayer2)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            if(layerType1 === layerType2) {\r\n              //union does not support multifeatures, so each feature must be individually added to the union \r\n              let currUnion = turf.union(map.getSource(selectedLayer1)._data.features[0], map.getSource(selectedLayer2)._data.features[0]);\r\n              for(let i = 1; i < map.getSource(selectedLayer1)._data.features.length; i++) {\r\n                currUnion = turf.union(currUnion, map.getSource(selectedLayer1)._data.features[i]);\r\n              }\r\n              for(let i = 1; i < map.getSource(selectedLayer2)._data.features.length; i++) {\r\n                currUnion = turf.union(currUnion, map.getSource(selectedLayer2)._data.features[i]);\r\n              }\r\n              //changes the type of the union result to feature collection if needed\r\n              if(currUnion.type === \"Feature\") {\r\n                currUnion = turf.featureCollection([currUnion]);\r\n              }\r\n              //adds the new layer to the map and updates mapLayers and buttons\r\n              addNewLayer(null, currUnion);\r\n              setTimeout(() => {\r\n                let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n                if(mapSourceLength === 0) {\r\n                  setMapLayers([]);\r\n                } else {\r\n                  let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n                  setMapLayers(mapLayersInOrder);\r\n                }\r\n                updateButtons();\r\n                toggleSpinner();\r\n              }, 350);\r\n            } else {\r\n              toggleSpinner();\r\n              alert(\"Choose two layers of the same type\");\r\n            }\r\n          }\r\n          catch(err) {\r\n            toggleSpinner();\r\n            alert(\"Pick two layers that are of the same type\");\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      //creates intersection between two layers\r\n      function createIntersect() {\r\n        toggleSpinner();\r\n        setTimeout(() => {\r\n          try {\r\n            let selectedLayer1 = document.getElementById(\"intersectSelectLayer1\").value;\r\n            let selectedLayer2 = document.getElementById(\"intersectSelectLayer2\").value;\r\n            let layerType1 = map.getSource(selectedLayer1)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            let layerType2 = map.getSource(selectedLayer2)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            if(layerType1 === \"Polygon\" && layerType2 === \"Polygon\") {\r\n              //turf.intersect accepts single features, so it is needed to iterate through the features and combining them into a single feature\r\n              let unioned =  map.getSource(selectedLayer1)._data.features[0];\r\n              if(map.getSource(selectedLayer1)._data.features.length > 1) {\r\n                for(let i = 1; i < map.getSource(selectedLayer1)._data.features.length; i++) {\r\n                  unioned = turf.union(unioned, map.getSource(selectedLayer1)._data.features[i]);\r\n                }\r\n              }\r\n              //instead of finding the intersection, we find first find the difference between the two layers\r\n              let currDiff = turf.difference(unioned, map.getSource(selectedLayer2)._data.features[0]);\r\n              for(let i = 1; i < map.getSource(selectedLayer2)._data.features.length; i++) {\r\n                currDiff = turf.difference(currDiff, map.getSource(selectedLayer2)._data.features[i]);\r\n              }\r\n              //then we find the difference between the first layer and the difference from earlier to get the intersection\r\n              let intersected = turf.difference(unioned, currDiff);\r\n              for(let i = 1; i < map.getSource(selectedLayer2)._data.features.length; i++) {\r\n                intersected = turf.difference(intersected, map.getSource(selectedLayer2)._data.features[i]);\r\n              }\r\n              if(intersected.type === \"Feature\") {\r\n                intersected = turf.featureCollection([intersected]);\r\n              }\r\n              //doing difference twice instead of doing intersection once will probably affect run time, but it was easier working with difference as it accepts multipolygons\r\n              addNewLayer(null, intersected)\r\n              setTimeout(() => {\r\n                let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n                if(mapSourceLength === 0) {\r\n                  setMapLayers([]);\r\n                } else {\r\n                  let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n                  setMapLayers(mapLayersInOrder);\r\n                }\r\n                updateButtons();\r\n                toggleSpinner();\r\n              }, 350);\r\n            } else {\r\n              toggleSpinner();\r\n              alert(\"Pick two polygon layers\");\r\n            }\r\n          }\r\n          catch(err) {\r\n            toggleSpinner();\r\n            alert(\"Please pick two polygon layers\");\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      //finds the difference between two layers, with focus being on the first layer\r\n      function createDifference() {\r\n        toggleSpinner();\r\n        setTimeout(() => {\r\n          try {\r\n            //does the same as intersect except for the second difference operation\r\n            let selectedLayer1 = document.getElementById(\"differenceSelectLayer1\").value;\r\n            let selectedLayer2 = document.getElementById(\"differenceSelectLayer2\").value;\r\n            let layerType1 = map.getSource(selectedLayer1)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            let layerType2 = map.getSource(selectedLayer2)._data.features[0].geometry.type.replace(\"Multi\", \"\");\r\n            if(layerType1 === \"Polygon\" && layerType2 === \"Polygon\") {\r\n              let unioned =  map.getSource(selectedLayer1)._data.features[0];\r\n              if(map.getSource(selectedLayer1)._data.features.length > 1) {\r\n                for(let i = 1; i < map.getSource(selectedLayer1)._data.features.length; i++) {\r\n                  unioned = turf.union(unioned, map.getSource(selectedLayer1)._data.features[i]);\r\n                }\r\n              } else {\r\n                unioned = map.getSource(selectedLayer1)._data.features[0];\r\n              }\r\n              let currDiff = turf.difference(unioned, map.getSource(selectedLayer2)._data.features[0]);\r\n              for(let i = 1; i < map.getSource(selectedLayer2)._data.features.length; i++) {\r\n                currDiff = turf.difference(currDiff, map.getSource(selectedLayer2)._data.features[i]);\r\n              }\r\n              if(currDiff === null) {\r\n                //as order matters when doing difference, it is possible for the user to use the wrong order and get no result\r\n                //this happens if the entirity of layer 1 is covered by layer 2\r\n                alert(\"Make sure you have selected two different layers and in the correct order\");\r\n              } else {\r\n                if(currDiff.type === \"Feature\") {\r\n                  currDiff = turf.featureCollection([currDiff]);\r\n                }\r\n                addNewLayer(null, currDiff);\r\n                setTimeout(() => {\r\n                  let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n                  if(mapSourceLength === 0) {\r\n                    setMapLayers([]);\r\n                  } else {\r\n                    let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n                    setMapLayers(mapLayersInOrder);\r\n                  }\r\n                  updateButtons();\r\n                  toggleSpinner();\r\n                }, 350);\r\n              }\r\n            } else {\r\n              toggleSpinner();\r\n              alert(\"Pick two polygon layers\");\r\n            }\r\n          }\r\n          catch(err) {\r\n            toggleSpinner();\r\n            alert(\"Please pick two polygon layers\");\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      //creates a single point from given coordinates\r\n      function createPoint() {\r\n        //changes the coordinate values from strings to floats\r\n        let longCoord = parseFloat(document.getElementById(\"createPointLong\").value);\r\n        let latCoord = parseFloat(document.getElementById(\"createPointLat\").value);\r\n        //creates a feature collection from the point\r\n        if(!isNaN(longCoord) && !isNaN(latCoord)) {\r\n          let data = {\"type\": \"FeatureCollection\", \r\n            \"features\": [\r\n              {\r\n                \"type\": \"Feature\",\r\n                \"geometry\": {\r\n                \"type\": \"Point\",\r\n                \"coordinates\": [\r\n                  longCoord,\r\n                  latCoord\r\n                ]\r\n              }\r\n            }]\r\n          }\r\n          addNewLayer(null, data);\r\n          setTimeout(() => {\r\n            let mapSourceLength = Object.keys(map.getStyle().sources).length - 1;\r\n              if(mapSourceLength === 0) {\r\n                setMapLayers([]);\r\n              } else {\r\n                let mapLayersInOrder = map.getStyle().layers.slice(-1 * mapSourceLength).map(function (obj) { return obj.id; });\r\n                setMapLayers(mapLayersInOrder);\r\n              }\r\n            updateButtons();\r\n          }, 350);\r\n        } else {\r\n          alert(\"Please provide coordinates for the point you want to make\")\r\n        }\r\n      }\r\n\r\n      //changes the visibility of a single layer depends on if it is visible or not\r\n      function showOrHide() {\r\n        let selectedLayer = this.id;\r\n        let visibility = map.getLayoutProperty(selectedLayer, \"visibility\");\r\n        if(visibility === \"visible\" || visibility === undefined) {\r\n          map.setLayoutProperty(selectedLayer, \"visibility\", \"none\");\r\n          this.textContent = \"Show\";\r\n        } else {\r\n          map.setLayoutProperty(selectedLayer, \"visibility\", \"visible\");\r\n          this.textContent = \"Hide\";\r\n        }\r\n      }\r\n\r\n      //creates a random color to be used for new layers\r\n      function randomizeColor() {\r\n        let colorLetters = \"0123456789ABCDEF\";\r\n        let randomColor = \"#\";\r\n        for (let i = 0; i < 6; i++) {\r\n          randomColor += colorLetters[Math.floor(Math.random() * colorLetters.length)];\r\n        }\r\n        return randomColor;\r\n      }\r\n\r\n      //listener that listens to input and if the input type is color changes the color of a layer\r\n      document.addEventListener(\"input\", function(event) {\r\n        if(event.target.type === \"color\") {\r\n          map.setPaintProperty(event.target.id, \"fill-color\", event.target.value);\r\n        }\r\n      })\r\n\r\n\r\n\r\n      let dragging = null;\r\n      //listener that detects if an object gets dragged\r\n      document.addEventListener('dragstart', function(event) {\r\n        let target = getLI( event.target );\r\n        dragging = target;\r\n        event.dataTransfer.setData('text/plain', null);\r\n      });\r\n\r\n      //listener that detects if a draggable object is dragged over another draggable object and then shows where the dragged object will be dropped when dropped\r\n      document.addEventListener('dragover', function(event) {\r\n        try {\r\n          event.preventDefault();\r\n          let target = getLI( event.target );\r\n          let bounding = target.getBoundingClientRect()\r\n          let offset = bounding.y + (bounding.height/2);\r\n          if ( event.clientY - offset > 0 ) {\r\n            target.style['border-bottom'] = 'solid 75px white';\r\n            target.style['border-top'] = '';\r\n          } else {\r\n            target.style['border-top'] = 'solid 75px white';\r\n            target.style['border-bottom'] = '';\r\n          }\r\n        }\r\n        catch(err) {\r\n        }\r\n      });\r\n\r\n      //listener that detects if a draggable object is dragged out of a element\r\n      document.addEventListener('dragleave', function(event) {\r\n        try {\r\n          let target = getLI( event.target );\r\n          target.style['border-bottom'] = '';\r\n          target.style['border-top'] = '';\r\n        }\r\n        catch(err) {\r\n        }\r\n      });\r\n\r\n      //listener that detects if a draggable object is dropped and moves the corresponding layer to the wanted position with regards to the z-axis\r\n      document.addEventListener('drop', function(event) {\r\n        try {\r\n          event.preventDefault();\r\n          let target = getLI( event.target );\r\n          if ( target.style['border-bottom'] !== '' ) {\r\n            target.style['border-bottom'] = '';\r\n            target.parentNode.insertBefore(dragging, event.target.nextSibling);\r\n          } else {\r\n            target.style['border-top'] = '';\r\n            target.parentNode.insertBefore(dragging, event.target);\r\n          }\r\n          if(dragging.previousSibling) {\r\n            map.moveLayer(dragging.id, dragging.previousSibling.id);\r\n          } else {\r\n            map.moveLayer(dragging.id);\r\n          }\r\n        }\r\n        catch(err) {\r\n        }\r\n      });\r\n\r\n      function getLI( target ) {\r\n          while ( target.nodeName.toLowerCase() !== 'li' && target.nodeName.toLowerCase() !== 'body' ) {\r\n              target = target.parentNode;\r\n          }\r\n          if ( target.nodeName.toLowerCase() === 'body' ) {\r\n              return false;\r\n          } else {\r\n              return target;\r\n          }\r\n      }\r\n\r\n      function toggleSpinner() {\r\n        let spinner = document.getElementById(\"loadingspinner\");\r\n        if(spinner.style.display === \"block\") {\r\n          spinner.style.display = \"none\";\r\n        } else if(spinner.style.display === \"none\") {\r\n          spinner.style.display = \"block\"\r\n        }\r\n      }\r\n\r\n      function updateButtons() {\r\n        let functionality = document.getElementById('functionality');\r\n        let buttons = functionality.getElementsByTagName('button');\r\n        for(let i = 0; i < buttons.length; i++) {\r\n          if(buttons[i].id === \"addBaseLayersButton\") {\r\n            buttons[i].onclick = addLayers;\r\n          }\r\n          else if(buttons[i].id === \"removeAllLayersButton\") {\r\n            buttons[i].onclick = removeAllLayers;\r\n          }\r\n          else if(buttons[i].id === \"bufferButton\") {\r\n            buttons[i].onclick = createBuffer;\r\n          }\r\n          else if(buttons[i].id === \"unionButton\") {\r\n            buttons[i].onclick = createUnion;\r\n          }\r\n          else if(buttons[i].id === \"intersectButton\") {\r\n            buttons[i].onclick = createIntersect;\r\n          }\r\n          else if(buttons[i].id === \"differenceButton\") {\r\n            buttons[i].onclick = createDifference;\r\n          }\r\n          else if(buttons[i].textContent === \"Hide\" || buttons[i].textContent === \"Show\") {\r\n            buttons[i].onclick = showOrHide;\r\n          }\r\n          else if(buttons[i].textContent === \"Delete\") {\r\n            buttons[i].onclick = removeSingleLayer;\r\n          }\r\n          else if(buttons[i].id === \"createPointButton\") {\r\n            buttons[i].onclick = createPoint;\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n    \r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  }, [map, mapLayers]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <SidePanel mapLayers={mapLayers}/>\r\n        <div className=\"mapcontainer\">\r\n          <div ref={el => (mapContainer.current = el)} className=\"map\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Map;","import React from \"react\";\r\nimport Map from \"./components/Map/Map\";\r\nimport \"./App.css\";\r\n//import Map2 from \"./components/Map2/Map2\";\r\n\r\nconst styles = {\r\n  overflow:'hidden',\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div style={styles}>\r\n      <div id=\"map\"></div>\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}